@using BlazorBlocks.Component;
@using BlazorBlocks.BlockEditor.Internals;
@using BlazorBlocks.Model;
@using BlazorBlocks.Component.Dialogs
@using BlazorBlocks.Support

@code {
    /// <summary>
    /// Represents the editor component for the Blazor Blocks.
    /// </summary>
    [Parameter, EditorRequired]
    public required BlazorBlocksEditorModel Model { get; set; }

    [Parameter]
    public EventCallback OnModelUpdated { get; set; }

    protected bool AddNewRowDialogVisible = false;
    protected EditorRowModel? RowAddingBelow = null;

    private void ShowDialog() => AddNewRowDialogVisible = true;
    private void HideDialog() => AddNewRowDialogVisible = false;

    private int? NewRowIndex;

    private async Task NewRowSelected(RowRegistration rowReg, int addIndex)
    {
        HideDialog();

        // For now, assume we always add the same row type
        // TODO: Show dialog to select row type

        var insertRow = new EditorRowModel
        {
            RowTypeName = rowReg.Name
        };
        foreach (var col in rowReg.Columns)
        {
            insertRow.Columns.Add(new EditorColumnModel { ColumnClass = col.ColumnClass });
        }

        Model.AddRow(insertRow, addIndex);
    }

    private async Task AddClicked(int index)
    {
        // Keep index around to track where the new row should be added
        NewRowIndex = index;

        // Show dialog to select row type
        ShowDialog();


    }

    /// <summary>
    /// Gets the index of the specified row.
    /// </summary>
    /// <param name="row">The row to get the index of.</param>
    /// <returns>The index of the row.</returns>
    protected int IndexOfRow(EditorRowModel row) => Model.Rows.IndexOf(row);

    /// <summary>
    /// Moves the specified row up.
    /// </summary>
    /// <param name="rowToMove">The row to move up.</param>
    protected async Task MoveRowUp(EditorRowModel rowToMove) => await MoveRow(rowToMove, -1);

    /// <summary>
    /// Moves the specified row down.
    /// </summary>
    /// <param name="rowToMove">The row to move down.</param>
    protected async Task MoveRowDown(EditorRowModel rowToMove) => await MoveRow(rowToMove, 1);

    /// <summary>
    /// Moves the specified row by the specified offset.
    /// </summary>
    /// <param name="rowToMove">The row to move.</param>
    /// <param name="offset">The offset to move the row by.</param>
    private async Task MoveRow(EditorRowModel rowToMove, int offset)
    {
        var clickedRowIndex = Model.Rows.IndexOf(rowToMove);
        var newPosition = clickedRowIndex + offset;
        if (offset == 0 || newPosition < 0 || newPosition >= Model.Rows.Count)
        {
            return;
        }

        Model.MoveRow(rowToMove, newPosition);
        await OnModelUpdated.InvokeAsync();
    }

    /// <summary>
    /// Deletes the specified row.
    /// </summary>
    /// <param name="rowToDelete">The row to delete.</param>
    protected async Task DeleteRow(EditorModel rowToDelete)
    {
        // Add warning dialog here
        Model.RemoveRow(rowToDelete as EditorRowModel);
        await OnModelUpdated.InvokeAsync();
    }

    protected async Task RowDropped(ObjectDroppedResult dropObject)
    {
        Console.WriteLine($"Dropping at {dropObject.Index}");
        if(dropObject.Model == null)
        {
            Console.WriteLine("Invalid drop object or index.");
            return;
        }
        Console.WriteLine($"Row dropped: {dropObject.Model.GetType().Name} at index {dropObject.Index}");
        if (dropObject.Model is not EditorRowModel droppedRow)
        {
            return;
        }

        // Find the placement of the row now
        var oldIndex = Model.Rows.IndexOf(droppedRow);

        Console.WriteLine($"Old index: {oldIndex}");
        // If the row is being dropped on itself, do nothing
        if (oldIndex == dropObject.Index)
        {
            return;
        }

        // If the row is being dropped on a different index, move it
        if (oldIndex < dropObject.Index)
        {
            // We're moving down, insert at new index then remove the old one
            Model.Rows.Insert(dropObject.Index, droppedRow);
            Model.Rows.RemoveAt(oldIndex);
        }
        else
        {
            // We're moving up, remove the old one then insert at new index
            Model.Rows.RemoveAt(oldIndex);
            Model.Rows.Insert(dropObject.Index, droppedRow);
        }

        await InvokeAsync(StateHasChanged);
    }
}

<NewRowDialog InsertIndex="@(NewRowIndex ?? 0)"
              Visible="AddNewRowDialogVisible"
              OnRowSelected="(selectedResult) => NewRowSelected(selectedResult.RowType, selectedResult.InsertIndex)" />

<div>
    <h3>Blazor Blocks Editor</h3>
    <CascadingValue Value="this">
        @for (int r = 0; r < Model.Rows.Count; r++)
        {
            var row = Model.Rows[r];
            <AddRow Index="@r" OnClicked="AddClicked" OnDropped="RowDropped" ObjectType="DragObjectType.Row" />
            <DraggableContainer Model="@row" ObjectType="DragObjectType.Row" ParentModel="null" Title="@row.RowTypeName" Draggable="Model.Rows.Count > 1" OnDelete="(model) => DeleteRow(model)">
                <EditorRow Model="@row" />
            </DraggableContainer>
        }
        <AddRow Index="Model.Rows.Count" OnClicked="AddClicked" OnDropped="RowDropped" ObjectType="DragObjectType.Row" />
    </CascadingValue>
</div>