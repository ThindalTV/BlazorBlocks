@using BlazorBlocks.Component;
@using BlazorBlocks.BlockEditor.Internals;
@using BlazorBlocks.Model;

@code {
    /// <summary>
    /// Represents the editor component for the Blazor Blocks.
    /// </summary>
    [Parameter, EditorRequired]
    public required BlazorBlocksEditorModel Model { get; set; }

    [Parameter]
    public EventCallback OnModelUpdated { get; set; }

    protected bool AddNewRowDialogVisible = false;
    protected EditorRowModel? RowAddingBelow = null;

    /// <summary>
    /// Shows the dialog to add a new row below the specified row.
    /// </summary>
    /// <param name="rowToAddBelow">The row to add the new row below.</param>
    protected void ShowNewRowDialog(EditorRowModel rowToAddBelow)
    {
        AddNewRowDialogVisible = true;
        RowAddingBelow = rowToAddBelow;

    }

    /// <summary>
    /// Adds a new row below the specified row.
    /// </summary>
    /// <param name="rowRegistration">The row definition to add.</param>
    protected async Task AddRowBelow(RowRegistration rowRegistration)
    {
        if (RowAddingBelow == null)
        {
            return;
        }

        var clickedRowIndex = Model.Rows.IndexOf(RowAddingBelow);
        var insertRow = new EditorRowModel();
        insertRow.RowTypeName = rowRegistration.Name;
        foreach (var col in rowRegistration.Columns)
        {
            insertRow.Columns.Add(new EditorColumnModel() { ColumnClass = col.ColumnClass });
        }

        Model.AddRow(insertRow, clickedRowIndex + 1);


        RowAddingBelow = null;
        AddNewRowDialogVisible = false;
        await OnModelUpdated.InvokeAsync();
    }

    /// <summary>
    /// Gets the index of the specified row.
    /// </summary>
    /// <param name="row">The row to get the index of.</param>
    /// <returns>The index of the row.</returns>
    protected int IndexOfRow(EditorRowModel row) => Model.Rows.IndexOf(row);

    /// <summary>
    /// Moves the specified row up.
    /// </summary>
    /// <param name="rowToMove">The row to move up.</param>
    protected async Task MoveRowUp(EditorRowModel rowToMove) => await MoveRow(rowToMove, -1);

    /// <summary>
    /// Moves the specified row down.
    /// </summary>
    /// <param name="rowToMove">The row to move down.</param>
    protected async Task MoveRowDown(EditorRowModel rowToMove) => await MoveRow(rowToMove, 1);

    /// <summary>
    /// Moves the specified row by the specified offset.
    /// </summary>
    /// <param name="rowToMove">The row to move.</param>
    /// <param name="offset">The offset to move the row by.</param>
    private async Task MoveRow(EditorRowModel rowToMove, int offset)
    {
        var clickedRowIndex = Model.Rows.IndexOf(rowToMove);
        var newPosition = clickedRowIndex + offset;
        if (offset == 0 || newPosition < 0 || newPosition >= Model.Rows.Count)
        {
            return;
        }

        Model.MoveRow(rowToMove, newPosition);
        await OnModelUpdated.InvokeAsync();
    }

    /// <summary>
    /// Deletes the specified row.
    /// </summary>
    /// <param name="rowToDelete">The row to delete.</param>
    protected async Task DeleteRow(EditorRowModel rowToDelete)
    {
        // Add warning dialog here
        Model.RemoveRow(rowToDelete);
        await OnModelUpdated.InvokeAsync();
    }
    }

    @if (AddNewRowDialogVisible)
{
    <Dialog Title="Add new row" OnClose="() => AddNewRowDialogVisible = false">
        @foreach (var colDefinition in BlockRegistrationService.RegisteredRows)
        {
            <button class="btn btn-info me-2" @onclick="() => AddRowBelow(colDefinition)">@colDefinition.Name</button>
        }
    </Dialog>
}

<div>
    <h3>Blazor Blocks Editor</h3>
    <CascadingValue Value="this">
        @foreach (var row in Model.Rows)
        {
            <EditorRow Model="@row"
                       OnAddRow="r => ShowNewRowDialog(r)"
                       OnMoveRowDown="r => MoveRowDown(r)"
                       OnMoveRowUp="r => MoveRowUp(r)"
                       OnDeleteRow="r => DeleteRow(r)"
                       CanMoveUp="IndexOfRow(row) > 0"
                       CanMoveDown="IndexOfRow(row) < Model.Rows.Count-1" />
        }
    </CascadingValue>
</div>