@using BlazorBlocks.Component;
@using BlazorBlocks.BlockEditor.Internals;
@using BlazorBlocks.Model;

@code {
    /// <summary>
    /// Represents the editor component for the Blazor Blocks.
    /// </summary>
    [Parameter]
    public EditorModel Model { get; set; }

    protected bool AddNewRowDialogVisible = false;
    protected EditorRowModel? RowAddingBelow = null;

    /// <summary>
    /// Shows the dialog to add a new row below the specified row.
    /// </summary>
    /// <param name="rowToAddBelow">The row to add the new row below.</param>
    protected void ShowNewRowDialog(EditorRowModel rowToAddBelow)
    {
        AddNewRowDialogVisible = true;
        RowAddingBelow = rowToAddBelow;

    }

    /// <summary>
    /// Adds a new row below the specified row.
    /// </summary>
    /// <param name="rowDefinition">The row definition to add.</param>
    protected void AddRowBelow(EditorRowModel rowDefinition)
    {
        if(RowAddingBelow == null)
        {
            return;
        }

        var clickedRowIndex = Model.Rows.IndexOf(RowAddingBelow);
        var insertRow = new EditorRowModel();
        foreach (var col in rowDefinition.Columns)
        {
            insertRow.Columns.Add(new EditorColumnModel() { ColumnSize = col.ColumnSize });
        }
        Model.Rows.Insert(clickedRowIndex + 1, insertRow);
        RowAddingBelow = null;
        AddNewRowDialogVisible = false;
    }

    /// <summary>
    /// Gets the index of the specified row.
    /// </summary>
    /// <param name="row">The row to get the index of.</param>
    /// <returns>The index of the row.</returns>
    protected int IndexOfRow(EditorRowModel row) => Model.Rows.IndexOf(row);

    /// <summary>
    /// Moves the specified row up.
    /// </summary>
    /// <param name="rowToMove">The row to move up.</param>
    protected void MoveRowUp(EditorRowModel rowToMove) => MoveRow(rowToMove, -1);

    /// <summary>
    /// Moves the specified row down.
    /// </summary>
    /// <param name="rowToMove">The row to move down.</param>
    protected void MoveRowDown(EditorRowModel rowToMove) => MoveRow(rowToMove, 1);

    /// <summary>
    /// Moves the specified row by the specified offset.
    /// </summary>
    /// <param name="rowToMove">The row to move.</param>
    /// <param name="offset">The offset to move the row by.</param>
    private void MoveRow(EditorRowModel rowToMove, int offset)
    {
        var clickedRowIndex = Model.Rows.IndexOf(rowToMove);
        var newPosition = clickedRowIndex + offset;
        if (offset == 0 || newPosition < 0 || newPosition >= Model.Rows.Count)
        {
            return;
        }

        Model.Rows.Remove(rowToMove);

        Model.Rows.Insert(newPosition, rowToMove);
    }

    /// <summary>
    /// Deletes the specified row.
    /// </summary>
    /// <param name="rowToDelete">The row to delete.</param>
    protected void DeleteRow(EditorRowModel rowToDelete)
    {
        Model.Rows.Remove(rowToDelete);
    }
}

@if (AddNewRowDialogVisible)
{
    <Dialog Title="Add new row" OnClose="() => AddNewRowDialogVisible = false">
        @foreach (var colDefinition in Model.ColumnDefinitions)
        {
            <button class="btn btn-info me-2" @onclick="() => AddRowBelow(colDefinition)">@colDefinition.ColumnCollectionName</button>
        }
    </Dialog>
}

<div>
    <h3>Blazor Blocks Editor</h3>
    @foreach (var row in Model.Rows)
    {
        <EditorRow Model="@row"
                   OnAddRow="r => ShowNewRowDialog(r)"
                   OnMoveRowDown="r => MoveRowDown(r)"
                   OnMoveRowUp="r => MoveRowUp(r)"
                   OnDeleteRow="r => DeleteRow(r)"
                   CanMoveUp="IndexOfRow(row) > 0"
                   CanMoveDown="IndexOfRow(row) < Model.Rows.Count-1" />
    }
</div>

@code {
}
