@using BlazorBlocks.Model
@using BlazorBlocks.Support
@using BlazorBlocks.Component

@inject DragService DragService

<div class="@(AdditionalCssClasses ?? "") dragContainer">
    <div class="dragHeader">
        @if (Draggable)
        {
            <span class="dragHandle" draggable="true" @ondragstart="@(() => StartDrag())" @ondragend="@(() => EndDrag())">
                <DragHandle Width="30" Height="70" />
            </span>
        }
        <CollapseButton Collapsed="@Model.Collapsed" OnCollapseClicked="OnCollapseClicked" />
        
        <span class="dragTitle">@Title</span>
        
        <span @onclick="() => OnDelete.InvokeAsync(Model)"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 14.828L12.001 12m2.828-2.828L12.001 12m0 0L9.172 9.172M12.001 12l2.828 2.828M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2S2 6.477 2 12s4.477 10 10 10" /></svg></span>
    </div>
    <div class="@(Model.Collapsed ? "collapsed " : "")dragContent">
        @ChildContent
    </div>

</div>

@code {
    [Parameter, EditorRequired]
    public required RenderFragment ChildContent { get; set; }

    [Parameter]
    public required string Title { get; set; }

    [Parameter]
    public DragObjectType ObjectType { get; set; }

    [Parameter]
    public EditorModel? Model { get; set; }

    [Parameter, EditorRequired]
    public required EditorModel? ParentModel { get; set; }

    [Parameter]
    public bool Draggable { get; set; }

    [Parameter]
    public EventCallback<EditorModel> OnDelete { get; set; }

    [Parameter]
    public string AdditionalCssClasses { get; set; }

    private bool _collapsed;

    protected void StartDrag()
    {
        if (DragService != null)
        {
            if (ObjectType == DragObjectType.Row)
            {
                DragService.DraggedRow = (EditorRowModel?)Model;
            }
            else
            {
                DragService.DraggedBlock = (EditorBlockModel?)Model;
                DragService.DraggedObjectParent = ParentModel;
            }
        }
    }

    protected void EndDrag()
    {
        if (DragService != null && DragService.DraggedRow != null)
        {
            DragService.DraggedRow = null;
        }
        else if (DragService is not null && DragService.DraggedBlock is not null)
        {
            DragService.DraggedBlock = null;
        }
    }

    protected void OnCollapseClicked()
    {
        Model.Collapsed = !Model.Collapsed;
    }
}
