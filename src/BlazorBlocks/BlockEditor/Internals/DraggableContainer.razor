@using System.ComponentModel
@using BlazorBlocks.Model
@using BlazorBlocks.Support

@inject DragService DragService

<div class="dragContainer">
    <div class="dragHeader">
        <span class="collapseButton" @onclick="OnCollapseClicked">Collapse/Uncollapse</span>
        <span class="dragTitle">@Title</span>
        @if (Draggable)
        {
            <span class="dragHandle" draggable="true" @ondragstart="@(() => StartDrag())" @ondragend="@(() => EndDrag())">
                DRAGHANDLE
                <i class="fa fa-arrows-alt"></i>
            </span>
        }
        - <button @onclick="() => OnDelete.InvokeAsync(Model)">DEL</button>
    </div>
    <div class="@(Model.Collapsed ? "collapsed " : "")dragContent">
        @ChildContent
    </div>

</div>

@code {
    [Parameter, EditorRequired]
    public required RenderFragment ChildContent { get; set; }

    [Parameter]
    public required string Title { get; set; }

    [Parameter]
    public DragObjectType ObjectType { get; set; }

    [Parameter]
    public EditorModel? Model { get; set; }

    [Parameter, EditorRequired]
    public required EditorModel? ParentModel { get; set; }

    [Parameter]
    public bool Draggable { get; set; }

    [Parameter]
    public EventCallback<EditorModel> OnDelete { get; set; }

    private bool _collapsed;

    protected void StartDrag()
    {
        if (DragService != null)
        {
            if (ObjectType == DragObjectType.Row)
            {
                DragService.DraggedRow = (EditorRowModel?)Model;
            }
            else
            {
                DragService.DraggedBlock = (EditorBlockModel?)Model;
                DragService.DraggedObjectParent = ParentModel;
            }
        }
    }

    protected void EndDrag()
    {
        if (DragService != null && DragService.DraggedRow != null)
        {
            DragService.DraggedRow = null;
        }
        else if (DragService is not null && DragService.DraggedBlock is not null)
        {
            DragService.DraggedBlock = null;
        }
    }

    protected void OnCollapseClicked()
    {
        Model.Collapsed = !Model.Collapsed;
    }
}
