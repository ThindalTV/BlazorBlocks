@using BlazorBlocks.Component;
@using BlazorBlocks.Model;
@using BlazorBlocks
@using BlazorBlocks.Support

@inject DragService DropService

@code {
    [Parameter, EditorRequired]
    public required EditorModel? ParentModel { get; set; }

    [Parameter, EditorRequired]
    public required EditorColumnModel Model { get; set; }

    [CascadingParameter]
    public required BlazorBlocksEditor Editor { get; set; }

    protected bool AddNewBlockDialogOpen { get; set; } = false;

    protected async Task AddBlock(BlazorBlocksBlockRegistration blockType)
    {
        var blockModel = Activator.CreateInstance(blockType.BlockModel) as BlazorBlocksEditorBlockBaseModel;
        if (blockModel == null) throw new InvalidOperationException($"Attempting to create a block model that is not a EditorBlockBaseModel. (It is {blockType.BlockModel.Name})");

        var blockEditorModel = new EditorBlockModel() { Block = blockModel, ParentModel = Model };

        Model.AddBlock(blockEditorModel, _addingBlockIndex ?? 0);
        AddNewBlockDialogOpen = false;
        await Editor.OnModelUpdated.InvokeAsync();
    }

    private int? _addingBlockIndex;
    protected void AddBlockClicked(int index)
    {
        _addingBlockIndex = index;
        // Open dialog to add a new block
        OpenAddNewBlockDialog();
    }

    protected void OpenAddNewBlockDialog()
    {
        AddNewBlockDialogOpen = true;
    }

    protected async Task DeleteBlock(EditorModel block)
    {
        Model.RemoveBlock(block as EditorBlockModel);
        await Editor.OnModelUpdated.InvokeAsync();
    }

    private int IndexOfBlock(EditorBlockModel block) => Model.BlocksModels.IndexOf(block);

    private bool Moveable => Model.BlocksModels.Count > 1;

    private bool Dragging = false;


    public void SetReadyToDrop()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        DropService.DraggedBlockChanged += async (dragging) =>
        {
            Dragging = dragging;
            await InvokeAsync(StateHasChanged);
        };
    }

    protected string ActiveDraggableClass => Dragging ? "dropZone active" : "dropZone";

    private async Task BlockDropped(ObjectDroppedResult dropped)
    {
        if (dropped.Model is not EditorBlockModel droppedBlock)
        {
            Console.WriteLine("Dropped object is not a block model.");
            return;
        }

        if(dropped.ParentColumn is not EditorColumnModel previousColumn)
        {
            Console.WriteLine("Dropped object does not have a valid parent column.");
            return;
        }

        // If we're dropping on the same column, we'll just reorder the blocks
        if (previousColumn.Id == Model.Id)
        {
            var oldIndex = Model.BlocksModels.IndexOf(droppedBlock);
            // If the row is being dropped on itself, do nothing
            if (oldIndex == dropped.Index)
            {
                return;
            }

            // If the row is being dropped on a different index, move it
            if (oldIndex < dropped.Index)
            {
                // We're moving down, insert at new index then remove the old one
                Model.BlocksModels.Insert(dropped.Index, droppedBlock);
                Model.BlocksModels.RemoveAt(oldIndex);
            }
            else
            {
                // We're moving up, remove the old one then insert at new index
                Model.BlocksModels.RemoveAt(oldIndex);
                Model.BlocksModels.Insert(dropped.Index, droppedBlock);
            }
        }
        else
        {
            droppedBlock.ParentModel = Model;
            // We're dropping on another column than where the block originated.
            previousColumn.BlocksModels.Remove(droppedBlock);
            Model.BlocksModels.Insert(dropped.Index, droppedBlock);
        }

        await InvokeAsync(StateHasChanged);


        Console.WriteLine("Block dropped");
    }

}

@if (AddNewBlockDialogOpen)
{
    <Dialog Title="Add new block" OnClose="() => { AddNewBlockDialogOpen = false; }">
        @foreach (var blockType in BlockRegistrationService.RegisteredBlocks)
        {
            @if (blockType.Image == null)
            {
                <button @onclick="() => AddBlock(blockType)">@blockType.Name</button>
            }
            else
            {
                <img @onclick="() => AddBlock(blockType)" src="@blockType.Image" />
            }
        }
    </Dialog>

}

<div class="@Model.ColumnClass editorColumn">
    @for (var index = 0; index < Model.BlocksModels.Count; index++)
    {
        var block = Model.BlocksModels[index];

        <AddRow ObjectType="DragObjectType.Block" OnDropped="BlockDropped" Index="@index" OnClicked="AddBlockClicked" />
        <DraggableContainer Model="@block"
                            ObjectType="DragObjectType.Block"
                            Title="@block.Block.EditorName"
                            Draggable="true" OnDelete="(model) => DeleteBlock(model)" ParentModel="@Model">
            <BlockContainer Model="@block.Block" />
        </DraggableContainer>
    }
    <AddRow ObjectType="DragObjectType.Block" OnDropped="BlockDropped" OnClicked="AddBlockClicked" Index="@Model.BlocksModels.Count" />
</div>

