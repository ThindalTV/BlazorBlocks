@using BlazorBlocks.Component;
@using BlazorBlocks.Blocks.ImageBlock;
@using BlazorBlocks.Blocks.RawTextBlock;
@using BlazorBlocks.Blocks.TitleBlock;
@using BlazorBlocks.Model;
@using BlazorBlocks

@code {
    [Parameter]
    public EditorColumnModel Model { get; set; }

    protected bool AddNewBlockDialogOpen { get; set; } = false;

    protected void AddBlock(BlockRegistration blockType)
    {
        var blockModel = Activator.CreateInstance(blockType.BlockModel) as EditorBlockBaseModel;
        if (blockModel == null) throw new InvalidOperationException($"Attempting to create a block model that is not a EditorBlockBaseModel. (It is {blockType.BlockModel.Name})");
        Model.Blocks.Add(blockModel);
        AddNewBlockDialogOpen = false;
    }

    protected void OpenAddNewBlockDialog()
    {
        AddNewBlockDialogOpen = true;
    }

protected void MoveBlockUp(EditorBlockBaseModel block)
    {
        var index = Model.Blocks.IndexOf(block);
        if (index > 0)
        {
            Model.Blocks.RemoveAt(index);
            Model.Blocks.Insert(index - 1, block);
        }
    }

protected void MoveBlockDown(EditorBlockBaseModel block)
    {
        var index = Model.Blocks.IndexOf(block);
        if (index < Model.Blocks.Count - 1)
        {
            Model.Blocks.RemoveAt(index);
            Model.Blocks.Insert(index + 1, block);
        }
    }

protected void DeleteBlock(EditorBlockBaseModel block)
    {
        Model.Blocks.Remove(block);
    }

    private int IndexOfBlock(EditorBlockBaseModel block) => Model.Blocks.IndexOf(block);
}

@if (AddNewBlockDialogOpen)
{
    <Dialog Title="Add new block" OnClose="() => { AddNewBlockDialogOpen = false; }">
        @foreach (var blockType in BlockRegistrationService.RegisteredBlocks)
        {
            @if (blockType.Image == null)
            {
                <button @onclick="() => AddBlock(blockType)">@blockType.Name</button>
            }
            else
            {
                <img @onclick="() => AddBlock(blockType)" src="@blockType.Image" />
            }
        }
    </Dialog>
}
<div class="@Model.ColumnSize editorColumn">
    @foreach (var block in Model.Blocks)
    {
        <BlockContainer
                        Model="@block"
                        OnMoveUp="b => MoveBlockUp(b)"
                        OnMoveDown="b => MoveBlockDown(b)"
                        OnDelete="b => DeleteBlock(b)"
                        CanMoveUp="IndexOfBlock(block) > 0"
                        CanMoveDown="IndexOfBlock(block) < Model.Blocks.Count-1" />
    }

    @if (BlockRegistrationService.RegisteredBlocks.Any())
    {
        <div class="text-center mt-2 mb-2">
            <button class="btn btn-primary addBlock" @onclick="() => OpenAddNewBlockDialog()"><i class="oi oi-plus"></i> Block</button>
        </div>
    }
</div>

